name: aws_ec2_deployments_for_ec2instance
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_S3_BUCKET_NAME: ec2instance-3963
  BUCKETLIST: $(aws s3api list-buckets --query "Buckets[].Name")
jobs:
  validation:
    runs-on: ubuntu-latest
    # outputs:
    #   checks_the_s3_bucket: ${{ steps.checks_the_s3_bucket.outputs.checks_the_s3_bucket }}
    steps:
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
      # - name: checks_the_s3_bucket_present_or_not
      #   id: checks_the_s3_bucket
      #   run: |
      #     aws s3api list-buckets --query "Buckets[].Name"
      #     echo "::set-output name=checks_the_s3_bucket::$(aws s3api list-buckets --query "Buckets[].Name")"
      #     #  echo "::set-output name=checks_the_s3_bucket::$(aws s3api list-buckets --query "Buckets[].Name")"
      # - name: Error handling
      #   run: |
      #     aws s3api create-bucket --bucket ${{ env.AWS_S3_BUCKET_NAME }}  --region ${{ secrets.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
      #   env:
      #     SMS: ${{job.status}}
      # - name: FInd the values
      #   run: echo $SMS

    # - name: make for-loop
    #   run: |
    #     for $i in ${{env.BUCKETLIST}}; do echo "$i"; done
    #     echo $i
    # - name: echo one
    #   run: echo "$i"
    # - name: echo two
    #   run: echo $i
  Build_and_upload_docker_iamges_to_ECR:
    runs-on: ubuntu-latest
    steps:
      - name: Configure the aws cli
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Checkout_Repo
        uses: actions/checkout@main
      - name: Build, tag, and push image to Amazon ECR
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: geppetto_generatedcode-sampleapplicatio_6199
          IMAGE_TAG: 1.0
        run: |
          cd application/services/custom_services/apigateway
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  Prerequisites:  
    needs: validation
    if: needs.validation.outputs.checks_the_s3_bucket == 'ec2instance-3963'
    runs-on: ubuntu-latest
    steps:
      - name: Configure the aws cli
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
      - name: echo the env
        run: echo $AWS_REGION
      - name: Creating the S3 bucket
        run: aws s3api create-bucket --bucket ${{ env.AWS_S3_BUCKET_NAME }}  --region ${{ secrets.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
      - name: list the s3 bucket
        run: aws s3api list-buckets --query "Buckets[].Name"

  # Upload_S3_Bucket:
  #   needs: Prerequisites
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup repo
  #       uses: actions/checkout@v2
  #     - name: Install the node
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12
  #     - name: Installing angular/cli
  #       run: npm install -g @angular/cli
  #     - name: Installing the node modules & build the project
  #       working-directory: ./application/client/desktop/ec2instance
  #       run: |
  #         npm install
  #         ng build --configuration=production
  #     - name: Uploaging dist files into the S3 bucket
  #       uses: jakejarvis/s3-sync-action@v0.5.1
  #       with:
  #         args: --acl public-read --delete
  #       env:
  #         AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET_NAME }}
  #         AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
  #         AWS_REGION: ${{ env.AWS_REGION }}
  #         SOURCE_DIR: "application/client/desktop/ec2instance/dist/ec2instance"
  #     - name: Enable the static webhosting
  #       run: aws s3 website s3://${{env.AWS_S3_BUCKET_NAME}}/ --index-document index.html --error-document error.html
